CREATE TABLE quality (
power VARCHAR(3) PRIMARY KEY
);

INSERT INTO quality VALUES
('1'),
('2'),
('3'),
('4'),
('5');

CREATE TABLE clubs (
name VARCHAR(200) PRIMARY KEY,
stadium VARCHAR(200),
city VARCHAR(200),
country TEXT,
power VARCHAR(3),
FOREIGN KEY (power) REFERENCES quality(power)
);



CREATE TABLE positions (
position VARCHAR(200) PRIMARY KEY
);

CREATE TABLE player (
player_id INT PRIMARY KEY,
surname VARCHAR(200),
name VARCHAR(200) NOT NULL,
position VARCHAR(200),
FOREIGN KEY (position) REFERENCES positions(position),
club VARCHAR(200),
FOREIGN KEY (club) REFERENCES clubs(name),
price FLOAT,
CHECK(price >= 4.0),
last_season_in_premier_league VARCHAR(3)
);




CREATE TABLE stats (
player_id INT,
full_name VARCHAR(200),
rival VARCHAR(200),
FOREIGN KEY (player_id) REFERENCES player(player_id),
FOREIGN KEY (rival) REFERENCES clubs(name),
position_in_the_game VARCHAR(200),
minutes_played INT,
goals_scored INT,
assists INT,
penalties_scored INT,
penalties_taken INT,
shots INT,
shots_on_target INT,
yellow_cards INT,
red_cards INT,
touches INT,
tackles INT,
interceptions INT,
blocks INT,
xg FLOAT,
npxg FLOAT,
xa FLOAT,
shot_created_actions INT,
goal_created_actions INT,
passes_completed INT,
passes_attempted INT,
progressive_passes INT,
carries INT,
progressive_carries INT,
take_ons_attempted INT,
successful_take_ons INT,
total_passing_distance INT,
progressive_passing_distance INT,
short_passes_completed INT,
short_passes_attempted INT,
mid_passes_completed INT,
mid_passes_attempted INT,
long_passes_completed INT,
long_passes_attempted INT,
key_passes INT,
passes_into_final_third INT,
passes_into_penalty_area INT,
crosses_into_penalty_area INT,
live_ball_passes INT,
dead_ball_passes INT,
passes_from_free_kicks INT,
through_balls INT,
switches INT,
crosses INT,
throw_ins INT,
corner_kicks INT,
inswingins_corners INT,
outswinging_corners INT,
straight_corners INT,
tackles_won INT,
tackles_def_3rd INT,
tackles_mid_3rd INT,
tackles_att_3rd INT,
dribbles_tackled INT,
dribbles_challenged INT,
challenges_lost INT,
shots_blocked INT,
passes_blocked INT,
clearances INT,
errors INT,
touches_def_pen INT,
touches_def_3rd INT,
touches_mid_3rd INT,
touches_att_3rd INT,
touches_att_pen INT,
live_ball_touches INT,
carries_tot_distance INT,
progressive_carrying_distance INT,
carries_into_final_3rd INT,
carries_into_pen_area INT,
miscontrols INT,
disspossesed INT,
passes_received INT,
progressive_passes_received INT,
fouls_committed INT,
fouls_drawn INT,
offsides INT,
penalties_won INT,
ball_recoveries INT,
aerials_won INT,
aerials_lost INT
);


INSERT INTO positions (position) VALUES
('Goalkeeper'),
('Defender'),
('Midfielder'),
('Forward');






CREATE VIEW all_info AS SELECT stats.player_id, CONCAT(player.surname,' ', player.name) as full_name, 
player.price, 
player.club, 
player.position,
player.last_season_in_premier_league, 
stats.rival, 
clubs.power, 
stats.position_in_the_game,
stats.minutes_played,
stats.goals_scored,
stats.assists,
stats.penalties_scored,
stats.penalties_taken,
stats.shots,
stats.shots_on_target,
stats.yellow_cards,
stats.red_cards,
stats.touches,
stats.tackles,
stats.interceptions,
stats.blocks,
stats.xg,
stats.npxg,
stats.xa,
stats.xg+stats.xa AS xg_xa,
stats.shot_created_actions,
stats.goal_created_actions,
stats.passes_completed,
stats.passes_attempted,
stats.progressive_passes,
stats.carries,
stats.progressive_carries,
stats.take_ons_attempted,
stats.successful_take_ons,
stats.total_passing_distance,
stats.progressive_passing_distance,
stats.short_passes_completed,
stats.short_passes_attempted,
stats.mid_passes_completed,
stats.mid_passes_attempted,
stats.long_passes_completed,
stats.long_passes_attempted,
stats.key_passes,
stats.passes_into_final_third,
stats.passes_into_penalty_area,
stats.crosses_into_penalty_area,
stats.live_ball_passes,
stats.dead_ball_passes,
stats.passes_from_free_kicks,
stats.through_balls,
stats.switches,
stats.crosses,
stats.throw_ins,
stats.corner_kicks,
stats.inswingins_corners,
stats.outswinging_corners,
stats.straight_corners,
stats.tackles_won,
stats.tackles_def_3rd,
stats.tackles_mid_3rd,
stats.tackles_att_3rd,
stats.dribbles_tackled,
stats.dribbles_challenged,
stats.challenges_lost,
stats.shots_blocked,
stats.passes_blocked,
stats.clearances,
stats.errors,
stats.touches_def_pen,
stats.touches_def_3rd,
stats.touches_mid_3rd,
stats.touches_att_3rd,
stats.touches_att_pen,
stats.live_ball_touches,
stats.carries_tot_distance,
stats.progressive_carrying_distance,
stats.carries_into_final_3rd,
stats.carries_into_pen_area,
stats.miscontrols,
stats.disspossesed,
stats.passes_received,
stats.progressive_passes_received,
stats.fouls_committed,
stats.fouls_drawn,
stats.offsides,
stats.penalties_won,
stats.ball_recoveries,
stats.aerials_won,
stats.aerials_lost,
stats.interceptions+ stats.blocks+ stats.clearances+ stats.tackles AS defensive_actions
FROM stats JOIN clubs ON stats.rival=clubs.name RIGHT OUTER JOIN player ON stats.player_id = player.player_id;



CREATE VIEW average AS
SELECT 
  stats.player_id,   
  CONCAT(player.surname, ' ', player.name) AS full_name, 
  player.price, 
  player.club, 
  player.position,  
  player.last_season_in_premier_league,
  COUNT(*) AS matches_played,
  ROUND(AVG(stats.minutes_played)::numeric, 2) AS avg_minutes_played,
  ROUND(SUM(stats.goals_scored)::numeric, 2) AS sum_goals_scored,
  ROUND(SUM(stats.assists)::numeric, 2) AS sum_assists,
  ROUND(AVG(stats.penalties_scored)::numeric, 2) AS avg_penalties_scored,
  ROUND(AVG(stats.penalties_taken)::numeric, 2) AS avg_penalties_taken,
  ROUND(AVG(stats.shots)::numeric, 2) AS avg_shots,
  ROUND(AVG(stats.shots_on_target)::numeric, 2) AS avg_shots_on_target,
  ROUND(AVG(stats.yellow_cards)::numeric, 2) AS avg_yellow_cards,
  ROUND(AVG(stats.red_cards)::numeric, 2) AS avg_red_cards,
  ROUND(AVG(stats.touches)::numeric, 2) AS avg_touches,
  ROUND(AVG(stats.tackles)::numeric, 2) AS avg_tackles,
  ROUND(AVG(stats.interceptions)::numeric, 2) AS avg_interceptions,
  ROUND(AVG(stats.blocks)::numeric, 2) AS avg_blocks,
  ROUND(AVG(stats.xg)::numeric, 2) AS avg_xg,
  ROUND(AVG(stats.npxg)::numeric, 2) AS avg_npxg,
  ROUND(AVG(stats.xa)::numeric, 2) AS avg_xa,
  ROUND(AVG(stats.xg+stats.xa)::numeric, 2) AS avg_xg_xa,
  ROUND(AVG(stats.shot_created_actions)::numeric, 2) AS avg_shot_created_actions,
  ROUND(AVG(stats.goal_created_actions)::numeric, 2) AS avg_goal_created_actions,
  ROUND(AVG(stats.passes_completed)::numeric, 2) AS avg_passes_completed,
  ROUND(AVG(stats.passes_attempted)::numeric, 2) AS avg_passes_attempted,
  ROUND(AVG(stats.progressive_passes)::numeric, 2) AS avg_progressive_passes,
  ROUND(AVG(stats.carries)::numeric, 2) AS avg_carries,
  ROUND(AVG(stats.progressive_carries)::numeric, 2) AS avg_progressive_carries,
  ROUND(AVG(stats.take_ons_attempted)::numeric, 2) AS avg_take_ons_attempted,
  ROUND(AVG(stats.successful_take_ons)::numeric, 2) AS avg_successful_take_ons,
  ROUND(AVG(stats.total_passing_distance)::numeric, 2) AS avg_total_passing_distance,
  ROUND(AVG(stats.progressive_passing_distance)::numeric, 2) AS avg_progressive_passing_distance,
  ROUND(AVG(stats.short_passes_completed)::numeric, 2) AS avg_short_passes_completed,
  ROUND(AVG(stats.short_passes_attempted)::numeric, 2) AS avg_short_passes_attempted,
  ROUND(AVG(stats.mid_passes_completed)::numeric, 2) AS avg_mid_passes_completed,
  ROUND(AVG(stats.mid_passes_attempted)::numeric, 2) AS avg_mid_passes_attempted,
  ROUND(AVG(stats.long_passes_completed)::numeric, 2) AS avg_long_passes_completed,
  ROUND(AVG(stats.long_passes_attempted)::numeric, 2) AS avg_long_passes_attempted,
  ROUND(AVG(stats.key_passes)::numeric, 2) AS avg_key_passes,
  ROUND(AVG(stats.passes_into_final_third)::numeric, 2) AS avg_passes_into_final_third,
  ROUND(AVG(stats.passes_into_penalty_area)::numeric, 2) AS avg_passes_into_penalty_area,
  ROUND(AVG(stats.crosses_into_penalty_area)::numeric, 2) AS avg_crosses_into_penalty_area,
  ROUND(AVG(stats.live_ball_passes)::numeric, 2) AS avg_live_ball_passes,
  ROUND(AVG(stats.dead_ball_passes)::numeric, 2) AS avg_dead_ball_passes,
  ROUND(AVG(stats.passes_from_free_kicks)::numeric, 2) AS avg_passes_from_free_kicks,
  ROUND(AVG(stats.through_balls)::numeric, 2) AS avg_through_balls,
  ROUND(AVG(stats.switches)::numeric, 2) AS avg_switches,
  ROUND(AVG(stats.crosses)::numeric, 2) AS avg_crosses,
  ROUND(AVG(stats.throw_ins)::numeric, 2) AS avg_throw_ins,
  ROUND(AVG(stats.corner_kicks)::numeric, 2) AS avg_corner_kicks,
  ROUND(AVG(stats.inswingins_corners)::numeric, 2) AS avg_inswingins_corners,
  ROUND(AVG(stats.outswinging_corners)::numeric, 2) AS avg_outswinging_corners,
  ROUND(AVG(stats.straight_corners)::numeric, 2) AS avg_straight_corners,
  ROUND(AVG(stats.tackles_won)::numeric, 2) AS avg_tackles_won,
  ROUND(AVG(stats.tackles_def_3rd)::numeric, 2) AS avg_tackles_def_3rd,
  ROUND(AVG(stats.tackles_mid_3rd)::numeric, 2) AS avg_tackles_mid_3rd,
  ROUND(AVG(stats.tackles_att_3rd)::numeric, 2) AS avg_tackles_att_3rd,
  ROUND(AVG(stats.dribbles_tackled)::numeric, 2) AS avg_dribbles_tackled,
  ROUND(AVG(stats.dribbles_challenged)::numeric, 2) AS avg_dribbles_challenged,
  ROUND(AVG(stats.challenges_lost)::numeric, 2) AS avg_challenges_lost,
  ROUND(AVG(stats.shots_blocked)::numeric, 2) AS avg_shots_blocked,
  ROUND(AVG(stats.passes_blocked)::numeric, 2) AS avg_passes_blocked,
  ROUND(AVG(stats.clearances)::numeric, 2) AS avg_clearances,
  ROUND(AVG(stats.errors)::numeric, 2) AS avg_errors,
  ROUND(AVG(stats.touches_def_pen)::numeric, 2) AS avg_touches_def_pen,
  ROUND(AVG(stats.touches_def_3rd)::numeric, 2) AS avg_touches_def_3rd,
  ROUND(AVG(stats.touches_mid_3rd)::numeric, 2) AS avg_touches_mid_3rd,
  ROUND(AVG(stats.touches_att_3rd)::numeric, 2) AS avg_touches_att_3rd,
  ROUND(AVG(stats.touches_att_pen)::numeric, 2) AS avg_touches_att_pen,
  ROUND(AVG(stats.live_ball_touches)::numeric, 2) AS avg_live_ball_touches,
  ROUND(AVG(stats.carries_tot_distance)::numeric, 2) AS avg_carries_tot_distance,
  ROUND(AVG(stats.progressive_carrying_distance)::numeric, 2) AS avg_progressive_carrying_distance,
  ROUND(AVG(stats.carries_into_final_3rd)::numeric, 2) AS avg_carries_into_final_3rd,
  ROUND(AVG(stats.carries_into_pen_area)::numeric, 2) AS avg_carries_into_pen_area,
  ROUND(AVG(stats.miscontrols)::numeric, 2) AS avg_miscontrols,
  ROUND(AVG(stats.disspossesed)::numeric, 2) AS avg_disspossesed,
  ROUND(AVG(stats.passes_received)::numeric, 2) AS avg_passes_received,
  ROUND(AVG(stats.progressive_passes_received)::numeric, 2) AS avg_progressive_passes_received,
  ROUND(AVG(stats.fouls_committed)::numeric, 2) AS avg_fouls_committed,
  ROUND(AVG(stats.fouls_drawn)::numeric, 2) AS avg_fouls_drawn,
  ROUND(AVG(stats.offsides)::numeric, 2) AS avg_offsides,
  ROUND(AVG(stats.penalties_won)::numeric, 2) AS avg_penalties_won,
  ROUND(AVG(stats.ball_recoveries)::numeric, 2) AS avg_ball_recoveries,
  ROUND(AVG(stats.aerials_won)::numeric, 2) AS avg_aerials_won,
  ROUND(AVG(stats.aerials_lost)::numeric, 2) AS avg_aerials_lost,
  ROUND(AVG(stats.interceptions + stats.blocks + stats.clearances + stats.tackles)::numeric, 2) AS avg_defensive_actions

FROM stats
JOIN player ON stats.player_id = player.player_id
JOIN clubs ON clubs.name = stats.rival

GROUP BY 
  stats.player_id, 
  player.surname,
  player.name,
  player.price, 
  player.club, 
  player.position,
  player.last_season_in_premier_league;















